# setup pcl from trunk using catkin

    mkdir -p pcl_ws/src && cd pcl_ws/src
    catkin_init_workspace
    git clone https://github.com/ros-perception/perception_pcl.git
    cd perception_pcl
    # checkout pcl folder from groove branch
    git checkout origin/groovy-unstable-devel -- pcl

in `pcl/CMakeLists.txt`, remove or comment the line starting with `GIT_TAG 098....`
in `pcl_ws`:

    catkin_make_isolated -DCMAKE_BUILD_TYPE=Release
    source devel_isolated/setup.bash

change to your default workspace and continue coding :)


# Data
the following dropbox link contains several bagfiles and other data
not stored on the repository:

https://www.dropbox.com/sh/dxuoppjfbenojlf/AABIntn4Zq49OTNQIXcSU-E3a?dl=0

to play the raw bagfiles, start the openni node first without loading the device:

   roslaunch openni_launch openni.launch load_driver:=false

to use the camera feed from the Kinect_

   roslaunch openni_launch openni.launch depth_registration:=true

# openni issues
### Error: No devices connected.... waiting for devices to be connected
build depends of ros openni_camera package:
on Ubuntu 14.04.01:
    libopenni-dev (1.5.4.0-7)
    libopenni-sensor-primesense-dev (5.1.0.41-3)

but we need
    libopenni-sensor-primesense-dev (5.1.2.1)
 
get it from:
    https://github.com/avin2/SensorKinect
or do:
    wget https://github.com/avin2/SensorKinect/archive/unstable.zip
    unzip unstable.zip
    cd SensorKinect-unstable/Bin
for 64-bit:
    tar vxf SensorKinect093-Bin-Linux-x64-v5.1.2.1.tar.bz2
    cd Sensor-Bin-Linux-x64-v5.1.2.1
    sudo ./install.sh

for 32-bit:
    tar vxf SensorKinect093-Bin-Linux-x86-v5.1.2.1.tar.bz2
    cd Sensor-Bin-Linux-x86-v5.1.2.1
    sudo ./install.sh

After the installation, a system reboot might help, too.

taken from http://answers.ros.org/question/60562/ubuntu-12042-and-openni_launch-not-detecting-kinect-after-update/

# 2D Simulator
start the kernel
   rosrun mlr_clustering lk2d_kernel_node

start clustering node
   rosrun mlr_clustering clustering_node.py

start 2D visualization
   rosrun mlr_visualization vis_2d

start simulator
   roscd mlr_simulation
   rosrun mlr_simulation simulation2d.py yaml/one_of_the_scenario_config_files.yaml

there are a couple of visualization topics that can be used with rviz
or any other image viewer. You might want to subscribe to:
   tracking/lk2d/image
   tracking/kernel_matrix
   tracking/probabilites

to change the kernel time window, e.g. to 5 seconds [default is 10s] use
   rosparam set /tracking/kernel/timespan 5.
and restart lk2d_kernel_node